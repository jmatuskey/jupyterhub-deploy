#! /usr/bin/env python

import os
import sys
import subprocess
import argparse
import json

admin_arn = os.environ.get('ADMIN_ARN')
ecr_account_to_use = os.environ.get('ECR_ACCOUNT_TO_USE')
image_repo = os.environ.get('IMAGE_REPO')


candidates_for_deletion = []

# TODO: add proper logging with levels

class Image(object):

    def __init__(self, digest):
        self.digest = digest
        self.insecure = False
        self.delete = False

    def scan(self):
        try:
            subprocess.check_output(f'image-scan-report Focal HIGH --image-digest {self.digest}'.split())
        except subprocess.CalledProcessError:
            self.insecure = True
            print(f'Insecure image detected: {self.digest}')
        except Exception as e:
            raise e

    def delete(self):
        pass


def prompt_for_deletion(img):
    valid_inputs = {'y': True,'n': False}
    prompt = f'Delete vulnerable image with digest {img.digest}? [y/N]'

    while True:
        sys.stdout.write(prompt)
        response = input().lower()
        if response in valid_inputs:
            img.delete = valid_inputs[response]
            break
        else:
            continue


def get_image_digests():
    untagged_images = subprocess.check_output(f"""
        awsudo -d 3600 {admin_arn} aws ecr list-images
        --registry-id {ecr_account_to_use}
        --repository-name {image_repo}
        --filter tagStatus=UNTAGGED""".split()
    )
    digests = json.loads(untagged_images)['imageIds']
    return [i['imageDigest'] for i in digests]




if __name__ == '__main__':
    # TODO: make Focal and HIGH optional args with defaults
    parser = argparse.ArgumentParser(
        description='Find and delete images in ECR that are failing security scans and are untagged'
    )
    parser.add_argument(
        '--all', dest='delete_all', action='store_true', default=False,
        help='don\'t prompt whether to delete each image, just delete all eligible')
    args = parser.parse_args()

    # find candidates for deletion (all untagged images in a repo)
    for d in get_image_digests():
        candidates_for_deletion.append(Image(d))

    # scan each image for vulnerabilities
    for img in candidates_for_deletion:
        img.scan()

    for img in candidates_for_deletion:
        if args.delete_all:
            for img in candidates_for_deletion:
                img.delete = True
            #img.delete()
            print('skipping "delete_all" for now...')
        else:
            prompt_for_deletion(img)

    for img in candidates_for_deletion:
        print(img.digest)
        print(img.insecure)
        print(img.delete)
        print()
























