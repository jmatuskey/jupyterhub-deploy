#! /usr/bin/env python

import os
import sys
import subprocess
import argparse
import json

"""
This tool scans an ECR repository to find images with vulnerabilities.
Images that are tagged are ignored.  All untagged images that are found to have
vulnerabilities are considered to be candidates for deletion.

Interactive and automated actions are both supported.  By default, this tool
will ask you to confirm deletion of each image that has been found to be
insecure.

Run "clean-ecr --help" for usage information.
"""

admin_arn = os.environ.get('ADMIN_ARN')
ecr_account_to_use = os.environ.get('ECR_ACCOUNT_TO_USE')
image_repo = os.environ.get('IMAGE_REPO')

candidates_for_deletion = []


class Image(object):

    def __init__(self, digest):
        self.digest = digest
        self.insecure = False
        self.to_delete = False

    def scan(self, os_version, min_severity):
        try:
            subprocess.check_output(f'image-scan-report {os_version} {min_severity} --image-digest {self.digest}'.split())
        except subprocess.CalledProcessError:
            self.insecure = True
            print(f'Insecure image detected: {self.digest}')
        except Exception as e:
            raise e

    def delete(self):
        subprocess.check_output(f"""
            awsudo -d 3600 {admin_arn} aws ecr batch-delete-image
            --registry-id {ecr_account_to_use}
            --repository-name {image_repo}
            --image-ids imageDigest={self.digest}""".split()
        )
        print(f'Deleted image with digest: {self.digest}')


def prompt_for_deletion(img):
    valid_inputs = {'y': True,'n': False}
    prompt = f'Delete vulnerable image with digest {img.digest}? [y/n]'

    while True:
        sys.stdout.write(prompt)
        response = input().lower()
        if response in valid_inputs:
            img.to_delete = valid_inputs[response]
            break
        else:
            continue

def get_image_digests():
    untagged_images = subprocess.check_output(f"""
        awsudo -d 3600 {admin_arn} aws ecr list-images
        --registry-id {ecr_account_to_use}
        --repository-name {image_repo}
        --filter tagStatus=UNTAGGED""".split()
    )
    digests = json.loads(untagged_images)['imageIds']
    return [i['imageDigest'] for i in digests]


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Find and delete images in ECR that are failing security scans and are untagged'
    )
    parser.add_argument(
        '--all', dest='delete_all', action='store_true', default=False,
        help='don\'t prompt whether to delete each image, just delete all untagged insecure images'
    )
    parser.add_argument(
        '--os-version', dest='os_version', action='store', default='Focal',
        help='Ubuntu version substring (default is "Focal")'
    )
    parser.add_argument(
        '--min-severity-level', dest='min_severity', action='store', default='HIGH',
        help='minimum severity level of vulnerabilities (default is "HIGH")'
    )
    args = parser.parse_args()

    # find candidates for deletion (all untagged images in a repo)
    for d in get_image_digests():
        candidates_for_deletion.append(Image(d))

    # scan each image for vulnerabilities
    for img in candidates_for_deletion:
        img.scan(args.os_version, args.min_severity)

    # determine which images should be deleted
    for img in candidates_for_deletion:
        if args.delete_all:
            for img in candidates_for_deletion:
                img.to_delete = True
        else:
            prompt_for_deletion(img)

    # delete images
    for img in candidates_for_deletion:
        if img.to_delete:
            img.delete()
