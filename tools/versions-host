#! /usr/bin/env python

# This script is used to dump the versions of all s/w which is
# critical to the hub,  broadly in two sections,  one for the image
# and one for terraform and hub setup.

import os
import subprocess
import glob
import argparse

from collections import defaultdict
from contextlib import contextmanager

import yaml



for envvar in ["ADMIN_ARN", "DEPLOYMENT_NAME"]:
    globals()[envvar] =  os.environ[envvar]



def run(cmd, cwd="."):
    result = subprocess.run(
        cmd.split(),
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True,
        check=True,
	cwd=cwd,
    )  # maybe succeeds
    return result.stdout


@contextmanager
def cwd(dir):
    old = os.getcwd()
    os.chdir(dir)
    try:
       yield
    finally:
       os.chdir(old)


def get_terraform():
    with cwd("/home/ec2-user/terraform-deploy/aws"):
        extract = {}
        files = glob.glob("*.tf")
        for file in files:
            lines = open(file).read().splitlines()
            extract.update(adjacent_lines(lines, "source", "version"))
            extract.update(adjacent_lines(lines, "chart", "version"))
        return dict(
            pkgs = extract,
	    terraform = run("terraform version").splitlines()[0].split()[1],
            eks = get_eks_version(),
	)


def adjacent_lines(lines, first, next):
    extract = {}
    for i in range(len(lines)-1):
        first_words = lines[i].split()
        next_words = lines[i+1].split()
        if len(first_words) < 3 or len(next_words) < 3:
            continue
        if first_words[0] == first and next_words[0] == next:
            efirst = first_words[2].replace('"','')
            enext = next_words[2].replace('"', '')
            if enext == "~>":
               enext = next_words[3].replace('"', '')
            extract[efirst] = enext
    return extract

def get_eks_version():
    lines = run(f"awsudo {ADMIN_ARN} aws eks describe-cluster --name {DEPLOYMENT_NAME}").splitlines()
    for line in lines:
        if "version" in line:
            return line.split('"')[3]
    return "UNDEFINED"

def  get_helm():
    pkgs  =  [" ".join(line.split()) for line in run("helm list").splitlines() if not line.startswith(("WARNING","NAME"))],
    return dict(
       pkgs = pkgs,
       helm = run("helm version").split('{')[1].split('}')[0].split(","),
    )


def get_python_env():
    return yaml.full_load(run("conda env export"))

def get_git_version(path):
    with cwd(path):
        return run("git log --no-color").splitlines()[0]


def main():
    host = dict(
        jupyterhub_deploy = get_git_version("/home/ec2-user/jupyterhub-deploy"),
        terraform_deploy = get_git_version("/home/ec2-user/terraform-deploy"),
        jupyter_docker_stacks = get_git_version("/home/ec2-user/docker-stacks"),
        terraform = get_terraform(),
        helm = get_helm(),
        python_env = get_python_env(),
    )
    print(yaml.dump(host))


if __name__ == "__main__":
    main()

