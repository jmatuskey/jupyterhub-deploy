#!/usr/bin/env python3
from argparse import ArgumentParser
import subprocess
import os

# Tags an image in git and ECR. `image-release 0.0.1`
# Will use params first or default to environment vars. 
# `image-release --registry 1234567, repo --myrepo, old-tag 0.0.0, 0.0.1`

def parse_args():
    parser = ArgumentParser("image-release", description="tag an existing image simultaneously in git and ECR")
    parser.add_argument("--registry", default=os.environ.get('ECR_ACCOUNT_TO_USE'), help="ECR registry number")
    parser.add_argument("--repo", default=os.environ.get('IMAGE_REPO'), help="Docker image repository, usually mission name")
    parser.add_argument("--old-tag", default=os.environ.get('IMAGE_TAG'), help="existing tag in ECR to modify")
    parser.add_argument("tag", help="desired tag to apply to both git and ECR")
    return parser.parse_args()


def main():
    try :
        args = parse_args()

        branch_name = subprocess.run(["git", "rev-parse", "--abbrev-ref", "HEAD"], check=True, stdout=subprocess.PIPE).stdout.decode("utf-8").strip()
        assert branch_name == "JUSI-760_release_tagging", "cannot publish and tag non-main git branch"

        # Confirm that local and remote are at the same revision
        subprocess.run(["git", "fetch"], check=True)
        our_hash = subprocess.run(["git", "rev-parse", "HEAD"], check=True, capture_output=True).stdout
        upstream_hash = subprocess.run(["git", "rev-parse", "@{u}"], check=True, capture_output=True).stdout
        assert our_hash == upstream_hash, "local and/or remote are missing commits"

        print(subprocess.run(["image-promote", "--registry", args.registry, "--repo", args.repo, "--old-tag", args.old_tag, args.tag], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, check=True).stdout)

        subprocess.run(["git", "tag", "-a", args.tag, "-m", "auto tag version"], check=True, capture_output=True)
        subprocess.run(["git", "push", "--tags"], check=True)
    
    except subprocess.CalledProcessError as e:
        print(e.stdout) 
        raise e
        
if __name__ == "__main__":
    main()
