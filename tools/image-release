#!/usr/bin/env python3
from argparse import ArgumentParser
import subprocess
import os

def parse_args():
    parser = ArgumentParser("image-release", description="tag an existing image simultaneously in git and ECR")
    parser.add_argument("--registry", default=os.environ.get('ECR_ACCOUNT_TO_USE'), help="ECR registry number")
    parser.add_argument("--repo", default=os.environ.get('IMAGE_REPO'), help="Docker image repository, usually mission name")
    parser.add_argument("--old-tag", default=os.environ.get('IMAGE_TAG'), help="existing tag in ECR to modify")
    parser.add_argument("tag", help="desired tag to apply to both git and ECR")
    return parser.parse_args()


def main():
    args = parse_args()

    branch_name = subprocess.check_output(["git", "rev-parse", "--abbrev-ref", "HEAD"]).decode("utf-8").strip()

    # assert branch_name == "JUSI-760_release_tagging", "cannot publish and tag non-main git branch"

    # Confirm that local and remote are at the same revision
    subprocess.check_call(["git", "fetch"])
    our_hash = subprocess.check_output(["git", "rev-parse", "HEAD"])
    upstream_hash = subprocess.check_output(["git", "rev-parse", "@{u}"])
    # assert our_hash == upstream_hash, "local and/or remote are missing commits"

    subprocess.run(["image-promote", "--registry", args.registry, "--repo", args.repo, "--old-tag", args.old_tag, args.tag], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, check=True)

    subprocess.check_call(["git", "tag", "-a", args.tag, "-m", "auto tag version"])
    subprocess.check_call(["git", "push", "--tags"])

if __name__ == "__main__":
    main()
