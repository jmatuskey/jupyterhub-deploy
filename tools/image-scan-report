#! /usr/bin/env python
#-*-python-*-

"""This tool pulls down Docker image scan reports from ECR based on
the current environment which is used to identify the image.

image-scan-report   <Ubuntu version substring, e.g. Focal>   <min severity level, e.g. medium>

The result of the report is a YAML file limited to CVE's which are
at the minimum severity level or greater.

For each CVE, the tool follows the URI reported by ECR (to an Ubuntu
website) and extracts the CVE status from that site, e.g. "Deferred" or
"Needed".
"""

import sys
import os
import subprocess
import json
import yaml
import copy

import requests
import bs4

admin_arn=os.environ["ADMIN_ARN"]
image_repo=os.environ["IMAGE_REPO"]
image_tag=os.environ["IMAGE_TAG"]

def get_scan_results():
    scan_results = subprocess.check_output((
        f"awsudo -d 3600 {admin_arn}  aws ecr describe-image-scan-findings "
        f"--no-paginate "
        f"--repository-name {image_repo} "
        f"--image-id imageTag={image_tag}").split())
    return json.loads(scan_results)

def limit_levels(version, levels, full_results):
    reduced_results = copy.deepcopy(full_results)
    findings  = reduced_results["imageScanFindings"]["findings"]
    reduced_results["imageScanFindings"]["findings"] = []
    for finding in findings:
        if finding["severity"] in levels or "ALL" in levels:
            reduced_results["imageScanFindings"]["findings"].append(finding)
            uri = finding["uri"]
            if "ubuntu" in uri:
                ubuntu_status = fetch_ubuntu_uri_status(uri, version)
                finding["cve_status"] = finding["name"] + " -- " + \
                                        finding["severity"] + " -- " + \
                                        ubuntu_status
            else:
                print("Unknown CVE URI:", uri)
    return reduced_results

KEEP_LEVELS = {
    "CRITICAL" : ["CRITICAL"],
    "HIGH": ["CRITICAL", "HIGH"],
    "MEDIUM" : ["CRITICAL", "HIGH", "MEDIUM"],
    "LOW" : ["CRITICAL", "HIGH", "MEDIUM", "LOW"],
    "INFORMATIONAL" : ["CRITICAL", "HIGH", "MEDIUM", "LOW", "INFORMATIONAL"],
    "ALL" : ["CRITICAL", "HIGH", "MEDIUM", "LOW", "INFORMATIONAL"],
}

def get_report_dict(version, levels):
    print("Fetching ECR vulnerability scan",file=sys.stderr)
    sys.stderr.flush()
    vulnerabilities = get_scan_results()
    while vulnerabilities["imageScanStatus"]["status"] != "COMPLETE":
        print("Waiting for ECR scan,  prior status:",
              vulnerabilities["imageScanStatus"]["status"], file=sys.stderr)
        sys.stderr.flush()
        time.sleep(10)
        vulnerabilities = get_scan_results()
    reduced = limit_levels(version, levels, vulnerabilities)
    return reduced

def fetch_ubuntu_uri_status(uri, version_name):
    response = requests.get(uri)
    soup = bs4.BeautifulSoup(response.text, "lxml")
    for row in soup.find_all("tr"):
        tds =  row.find_all("td")
        if len(tds) < 2:
            continue
        if version_name.lower() in tds[0].text.lower():
            return tds[0].text.strip() + " -- " + tds[1].text.split()[0]
    return  "unknown"

def main():
    if len(sys.argv) != 3:
        print("usage:", os.path.basename(sys.argv[0]),
              "<Ubuntu version name, e.g. Focal>  <minimum severity level from", list(KEEP_LEVELS.keys()), ">")
        print("example:", os.path.basename(sys.argv[0]), "Focal  medium")
        sys.exit(1)
    version = sys.argv[1]
    levels = KEEP_LEVELS[sys.argv[2].upper()]
    reduced = get_report_dict(version, levels)
    print(yaml.dump(reduced))

if __name__ == "__main__":
    main()
